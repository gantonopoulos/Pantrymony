@page "/editor/{UserId}/{Identifier}"
@using Microsoft.AspNetCore.Components
@using Pantrymony.Communication
@using Pantrymony.Extensions
@using Pantrymony.Model
@using Pantrymony.Common
@inject ILogger<Editor> Logger
@inject HttpClient HttpClient
@inject IConfiguration Configuration
@inject NavigationManager UriHelper
@inject IJSRuntime JsRuntime
<PageTitle>Add/Edit entry</PageTitle>

<h3>Editor</h3>

<table class="table">
    <tr class="form-group">
        <td>
            <span class="col-form-label">Upload Image files</span>
            <InputFile id="fileInput" OnChange="VictualImageChanged" accept=".png,.jpg,jpeg"/>
        </td>
        <td>
            @if (!string.IsNullOrEmpty(_editedEntry.ImageUrl))
            {
                <img id="VictualImage" alt="" src="">
            }
            else
            {
                <img id="VictualImage" src = @_editedEntry.ImageUrl alt="">
            }
            
        </td>
    </tr>
    <tr class="form-group">
        <td>
            <span class="col-form-label">Name</span>
        </td>
        <td>
            <input type="text" class="input-group" @bind="_editedEntry.Name"/>
        </td>
    </tr>
    <tr class="form-group">
        <td>
            <label>Quantity:@_editedEntry.Quantity</label>
            <button class="btn btn-outline-primary" @onclick="() => { IncrementQuantity(_editedEntry); }">+</button>
            <button class="btn btn-outline-primary" @onclick="() => { DecrementQuantity(_editedEntry); }">-</button>
        </td>
    </tr>
    <tr class="form-group">
        <td>
                    <span class="col-form-label">Measurement Unit</span>
        </td>
        <td>
            @if (_units.Any())
            {
                <select class="custom-select" title="Measurement Unit" value="@_editedEntry.Unit"
                        @onchange="args => { OnUnitSelectionChanged(args, _editedEntry); }">
                    <option value="Select" selected disabled="disabled">(Choose measurement unit)</option>
                    @foreach (var unit in _units)
                    {
                        <option value="@unit.Symbol"> @unit.Symbol</option>
                    }
                </select>
            }
        </td>
    </tr>
    <tr class="form-group">
        <td>
            <span class="col-form-label">KCal/100 units</span>
        </td>
        <td>
            <input type="number" class="input-group" @bind="_editedEntry.Calories"/>
        </td>
    </tr>
    <tr class="form-group">
        <td>
            <span class="col-form-label">Protein %</span>
        </td>
        <td>
            <input type="number" class="input-group" @bind="_editedEntry.Protein"/>
        </td>
    </tr>
    <tr class="form-group">
        <td>
            <span class="col-form-label">Carbohydrates %</span>
        </td>
        <td>
            <input type="number" class="input-group" @bind="_editedEntry.Carbs"/>
        </td>
    </tr>
    <tr class="form-group">
        <td>
            <span class="col-form-label">Fat %</span>
        </td>
        <td>
            <input type="number" class="input-group" @bind="_editedEntry.Fat"/>
        </td>
    </tr>
     <tr class="form-group">
            <td>
                <span class="col-form-label">Expiration date</span>
            </td>
            <td>
                <input type="date" value="@_editedEntry.Expires.ToString("yyyy-MM-dd")" @onchange="ExpirationDateChanged"/>
            </td>
        </tr>
    <tr class="form-group">
        <td>
            <button class="btn btn-outline-primary" @onclick="SaveChangesAsync">Save</button>
        </td>
    </tr>
</table>



@code {
    

    private enum OperatingMode
    {
        Editing,
        Adding,
        None
    }
    
    [Parameter]
    public string UserId { get; set; }
    [Parameter]
    public string Identifier { get; set; }

    private IBrowserFile _selectedVitualImage;

    private OperatingMode _operatingMode = OperatingMode.None;
    private Victual _editedEntry = new();
    private List<Unit> _units = new();
    private readonly PageInjectedDependencies _injectedDependencies = new();
    
    protected override async Task OnInitializedAsync()
    {
        _injectedDependencies.JScriptRuntime = JsRuntime;
        _injectedDependencies.Logger = Logger;
        _injectedDependencies.HttpClient = HttpClient;
        _injectedDependencies.Configuration = Configuration;
        
        await LoadMeasurementUnits();
        Identifier.ThrowIfNull(new ArgumentNullException(nameof(Identifier)));
        if (Guid.Parse(Identifier!) == Guid.Empty)
        {
            _operatingMode = OperatingMode.Adding;
            _editedEntry = new Victual
            {
                UserId = UserId,
                VictualId = Guid.NewGuid(),
                Expires = DateTime.Now,
                ImageUrl = String.Empty,
                Unit = _units.First().Symbol
            };
        }
        else
        {
            _operatingMode = OperatingMode.Editing;
            _editedEntry = await BackendCommunication.FetchVictualOfUser(UserId, Identifier, _injectedDependencies);
        }
    }

    private async Task LoadMeasurementUnits()
    {
        var units = await BackendCommunication.FetchUnitsAsync(_injectedDependencies);
        _units = units.ToList();
    }

    private void IncrementQuantity(Victual victual)
    {
        victual.Quantity++;
    }

    private void DecrementQuantity(Victual victual)
    {
        victual.Quantity--;
    }

    private async Task SaveChangesAsync()
    {
        if (_operatingMode == OperatingMode.Adding)
        {
            await BackendCommunication.PostNewEntryAsync(_editedEntry, _injectedDependencies);
        }
        else
        {
            await PutExistingEntryAsync(_editedEntry);
        }
        UriHelper.NavigateTo($"/");
    }

    private async Task PutExistingEntryAsync(Victual editedEntry)
    {
        await BackendCommunication.SendUpdateVictualAsync(_injectedDependencies, editedEntry);
    }

    private async Task VictualImageChanged(InputFileChangeEventArgs fileChangeEventArgs)
    {
        try
        {
            _editedEntry.ImageUrl = string.Empty;
            var imageFile = fileChangeEventArgs.File;
            _selectedVitualImage = 
                await imageFile.RequestImageFileAsync("image/jpg", 300, 500);
            var imageStream = _selectedVitualImage.OpenReadStream();
            var dotnetImageStream = new DotNetStreamReference(imageStream);
            var jsUtils = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./scripts/util.js");
            await jsUtils.InvokeVoidAsync("setImageUsingStreaming", "VictualImage", dotnetImageStream);
        }
        catch (Exception ex)
        {
            Logger.LogError("{Message}:{Stack}",ex.Message,ex.StackTrace);
            throw;
        }
    }
 
    private void ExpirationDateChanged(ChangeEventArgs obj)
    {
        if(obj.Value != null && DateTime.TryParse(obj.Value.ToString(), out var updatedDate))
            _editedEntry.Expires = updatedDate;
    }

    private void OnUnitSelectionChanged(ChangeEventArgs args, Victual editedEntry)
    {
        if (args.Value == null)
            return;
        var measurementUnit = _units.SingleOrDefault(unit => unit.Symbol == args.Value.ToString());
        if(measurementUnit == null)
            return;
        editedEntry.Unit = measurementUnit.Symbol;
    }

}