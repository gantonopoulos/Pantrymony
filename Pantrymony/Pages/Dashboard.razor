@page "/"
@using Pantrymony.Model
@inject NavigationManager _uriHelper
@inject IConfiguration _configuration
@inject HttpClient _http

@attribute [Authorize] 

<PageTitle>My Pantry + @Title</PageTitle>

<h1>My Products</h1>

<button class="btn btn-primary" @onclick="AddNewEntry">Add</button>
<button class="btn btn-primary" @onclick="DeleteSelectedEntriesAsync"
        disabled="@IsDeletingDisabled">Delete</button>
<button class="btn btn-primary" @onclick="EditSelectedEntry" 
        disabled="@IsEditingDisabled">Edit</button>


<table class="table">
    <ul>
        @foreach (Victual pantryEntry in _entries)
        {
            <tr class="form-group">
                <td><input type="checkbox" @onclick="() => { EntrySelected(pantryEntry); }"/></td>
                <td><span class="col-form-label">@pantryEntry.Name</span></td>
                <td><img src="@pantryEntry.ImageUrl" alt=""></td>
                <td><label>Quantity:@pantryEntry.Quantity</label></td>
                <td><button class="btn btn-primary" @onclick="() => { IncrementQuantity(pantryEntry); }">+</button></td>
                <td><button class="btn btn-primary" @onclick="() => { DecrementQuantity(pantryEntry); }">-</button></td>
            </tr>
        }
    </ul>
</table>

@code {


    private readonly List<Victual> _selectedEntries = new();
    private List<Victual> _entries = new();
    private string Title;


    protected override async Task OnInitializedAsync()
    {
        await FetchVictualsAsync();
    }

    private async Task FetchVictualsAsync()
    {
        try
        {
            var response =
                await _http.GetFromJsonAsync<List<Victual>>(_configuration["TargetApi"] + "/victuals");
            _entries = response ?? new List<Victual>();
            _entries.ForEach(Console.WriteLine);
        }
        catch (Exception e)
        {
            Console.WriteLine("Victuals could not be parsed");
            Console.WriteLine(e);
        }
    }

    private void IncrementQuantity(Victual entry)
    {
        entry.Quantity++;
        //Notify db about quantity increase
    }

    private void DecrementQuantity(Victual entry)
    {
        entry.Quantity--;
    //Notify db about quantity decrease
    }

    private void AddNewEntry()
    {
        _uriHelper.NavigateTo($"editor/{Guid.Empty.ToString()}");
    }

    private async Task DeleteSelectedEntriesAsync()
    {
        foreach (var entry in _selectedEntries)
        {
            await RequestDeleteVictualAsync(entry);
        }
        _selectedEntries.Clear();
        
        
        await FetchVictualsAsync();
    }

    private async Task RequestDeleteVictualAsync(Victual victual)
    {
        await _http.DeleteAsync(_configuration["TargetApi"] + $"/victuals/{victual.Identifier}");
    }

    private void EntrySelected(Victual victual)
    {
        if (_selectedEntries.Contains(victual))
        {
            Console.WriteLine($" Unselected [{victual.Identifier}]");
            _selectedEntries.Remove(victual);
        }
        else
        {
            Console.WriteLine($"Selected [{victual.Identifier}]");
            _selectedEntries.Add(victual);
        }
               
    }

    private void EditSelectedEntry()
    {
        _uriHelper.NavigateTo($"editor/{_selectedEntries.First().Identifier}");
    }

    private bool IsEditingDisabled => _selectedEntries.Count() != 1;

    private bool IsDeletingDisabled => !_selectedEntries.Any();

}