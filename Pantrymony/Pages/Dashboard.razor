@page "/"
@using Pantrymony.Model
@using Pantrymony.Communication
@using System.Security.Authentication
@inject NavigationManager UriHelper
@inject IConfiguration Configuration
@inject HttpClient Http
@inject ILogger<Dashboard> Logger
@inject AuthenticationStateProvider AuthState
@attribute [Authorize] 

<PageTitle>My Pantry + @Title</PageTitle>

<h1>My Products</h1>

<button class="btn btn-primary" @onclick="AddNewEntryAsync">Add</button>
<button class="btn btn-primary" @onclick="DeleteSelectedEntriesAsync"
        disabled="@IsDeletingDisabled">Delete</button>
<button class="btn btn-primary" @onclick="EditSelectedEntryAsync" 
        disabled="@IsEditingDisabled">Edit</button>


<table class="table">
    <ul>
        @foreach (Victual pantryEntry in _entries)
        {
            <tr class="form-group">
                <td><input @key="pantryEntry" type="checkbox" @onclick="() => { EntrySelected(pantryEntry); }"/></td>
                <td><span class="col-form-label">@pantryEntry.Name</span></td>
                <td><img src="@pantryEntry.ImageUrl" alt=""></td>
                <td><label>Quantity:@pantryEntry.Quantity</label></td>
                <td><button class="btn btn-primary" @onclick="() => { IncrementQuantity(pantryEntry); }">+</button></td>
                <td><button class="btn btn-primary" @onclick="() => { DecrementQuantity(pantryEntry); }">-</button></td>
                <td><label>Expires:</label></td>
                <td><input type="date"  value="@pantryEntry.Expires.ToString("yyyy-MM-dd")" 
                           @onchange="changeArgs => { ExpirationDateChangedAsync(changeArgs, pantryEntry); }"/></td>
                <td><select class="custom-select" title="Measurement Unit"
                            value="@pantryEntry.Unit"
                            @onchange="args => { OnUnitSelectionChangedAsync(args, pantryEntry);}">
                     <option value="Select" selected disabled="disabled">(Choose measurement unit)</option>
                    @foreach (var unit in _units)  
                    {  
                        <option value="@unit.Symbol"> @unit.Symbol</option>  
                    }  
                </select>
                </td>
            </tr>
        }
    </ul>
</table>

@code {


    private readonly List<Victual> _selectedEntries = new();
    private List<Victual> _entries = new();
    private List<Unit> _units = new();
    private string Title;


    protected override async Task OnInitializedAsync()
    {
        await GetAuthenticatedUserDataAsync();
        await FetchVictualsAsync();
        var units = await BackendCommunication.FetchUnitsAsync(Http, Configuration);
        _units = units.ToList();
    }
    private async Task<string> GetAuthenticatedUserDataAsync()
    {
        var state = await AuthState.GetAuthenticationStateAsync();
        
        if (!state.User.HasClaim(claim => claim.Type == Common.Constants.EmailOidcClaimType))
        {
            const string errorMsg = "Authenticated User Email could not be retrieved";
            Logger.LogError(errorMsg);
            throw new AuthenticationException(errorMsg);
        }
        
        return state.User.Claims.First(claim => claim.Type == Common.Constants.EmailOidcClaimType).Value;
    }
    
    private async Task FetchVictualsAsync()
    {
        try
        {
            Logger.LogInformation("Fetching Victuals!");
            var userId = await GetAuthenticatedUserDataAsync();
            var response =
                await Http.GetFromJsonAsync<List<Victual>>(Configuration["TargetApi"] + 
                                                           $"/uservictuals?userId={userId}");
            
            _entries = response != null? response.OrderBy(entry=>entry.Name).ToList(): new List<Victual>();
            _entries.ForEach(Console.WriteLine);
        }
        catch (Exception e)
        {
            Console.WriteLine("Victuals could not be parsed");
            Console.WriteLine(e);
        }
    }

    private async Task IncrementQuantity(Victual entry)
    {
        entry.Quantity++;
        await BackendCommunication.SendUpdateVictualAsync(Http, Configuration, entry);
        await OnInitializedAsync();
    }

    private async Task DecrementQuantity(Victual entry)
    {
        entry.Quantity--;
        await BackendCommunication.SendUpdateVictualAsync(Http, Configuration, entry);
        await OnInitializedAsync();
    }

    private async void AddNewEntryAsync()
    {
        var userId = await GetAuthenticatedUserDataAsync();
        UriHelper.NavigateTo($"editor/{userId}/{Guid.Empty.ToString()}");
    }

    private async Task DeleteSelectedEntriesAsync()
    {
        foreach (var entry in _selectedEntries)
        {
            await RequestDeleteVictualAsync(entry);
        }
        _selectedEntries.Clear();
        await OnInitializedAsync();
    }

    private async Task RequestDeleteVictualAsync(Victual victual)
    {
        await Http.DeleteAsync(Configuration["TargetApi"] + 
                               $"/deletevictual?userId={victual.UserId}&" +
                               $"victualId={victual.VictualId}'");
    }

    private void EntrySelected(Victual victual)
    {
        if (_selectedEntries.Contains(victual))
        {
            Console.WriteLine($" Unselected [{victual.VictualId}]");
            _selectedEntries.Remove(victual);
        }
        else
        {
            Console.WriteLine($"Selected [{victual.VictualId}]");
            _selectedEntries.Add(victual);
        }
    }

    private async void EditSelectedEntryAsync()
    {
        var userId = await GetAuthenticatedUserDataAsync();
        UriHelper.NavigateTo($"editor/{userId}/{_selectedEntries.First().VictualId}");
    }

    private bool IsEditingDisabled => _selectedEntries.Count() != 1;

    private bool IsDeletingDisabled => !_selectedEntries.Any();

    private async void ExpirationDateChangedAsync(ChangeEventArgs obj, Victual entry)
    {
        try
        {
            if (obj.Value == null || !DateTime.TryParse(obj.Value.ToString(), out var updatedDate)) return;
            entry.Expires = updatedDate;
            await BackendCommunication.SendUpdateVictualAsync(Http, Configuration, entry);
            await OnInitializedAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        
    }

    private async void OnUnitSelectionChangedAsync(ChangeEventArgs obj, Victual entry)
    {
        if (obj.Value == null)
            return;
        var measurementUnit = _units.SingleOrDefault(unit => unit.Symbol == obj.Value.ToString());
        if(measurementUnit == null)
            return;
        entry.Unit = measurementUnit.Symbol;
        await BackendCommunication.SendUpdateVictualAsync(Http, Configuration, entry);
        await OnInitializedAsync();
    }
}