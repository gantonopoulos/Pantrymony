@page "/"
@using Pantrymony.Model
@inject NavigationManager _uriHelper
@inject IConfiguration _configuration
@inject HttpClient _http

@attribute [Authorize] 

<PageTitle>My Pantry + @Title</PageTitle>

<h1>My Products</h1>

<button class="btn btn-primary" @onclick="AddNewEntry">Add</button>
<button class="btn btn-primary" @onclick="DeleteSelectedEntries">Delete</button>
<button class="btn btn-primary" @onclick="EditSelectedEntry" >Edit</button>


<table class="table">
    <ul>
        @foreach (Victual pantryEntry in _entries)
        {
            <tr class="form-group">
                <td><input type="checkbox" @onclick="() => { EntrySelected(pantryEntry); }"/></td>
                <td><span class="col-form-label">@pantryEntry.Name</span></td>
                <td><img src="@pantryEntry.ImageUrl" alt=""></td>
                <td><label>Quantity:@pantryEntry.Quantity</label></td>
                <td><button class="btn btn-primary" @onclick="() => { IncrementQuantity(pantryEntry); }">+</button></td>
                <td><button class="btn btn-primary" @onclick="() => { DecrementQuantity(pantryEntry); }">-</button></td>
            </tr>
        }
    </ul>
</table>

@code {


    private List<Victual> _entries = new List<Victual>();
    private string Title;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = 
                await _http.GetFromJsonAsync<List<Victual>>(_configuration["TargetApi"] + "/victuals");
            _entries = response ?? new List<Victual>();
        }
        catch (Exception e)
        {
            Console.WriteLine("Victuals could not be parsed");
            Console.WriteLine(e);
        }
        
    }

    private void IncrementQuantity(Victual entry)
    {
        entry.Quantity++;
        //Notify db about quantity increase
    }

    private void DecrementQuantity(Victual entry)
    {
        entry.Quantity--;
    //Notify db about quantity decrease
    }

    private void AddNewEntry()
    {
        throw new NotImplementedException();
    }

    private void DeleteSelectedEntries()
    {
        throw new NotImplementedException();
    }

    private void EntrySelected(Victual victual)
    {
        
    }

    private void EditSelectedEntry()
    {
        _uriHelper.NavigateTo($"editor/{_entries.First().Identifier}");
    }

}